metadata:
  # A short, unique suite identifier (used for naming runs and outputs).
  name: simulator
  # One or two sentences describing what this suite explores.
  description: >
    Define an experiment to train the estimation model.

# -----------------------------------------------------------------------------
# configuration
# -----------------------------------------------------------------------------
# Minimal, global settings independent of any particular experiment case.
# - namespace: where resources for this suite are created.
# - output: location where experiment output should be written. This is a 
#           one of git, s3, or googledrive and a dir.
# - output.dir: the location on the target medium where a directory of the results should be written.
# - source: the location of a directory on the results PVC where sweep steps will write results
  output:
    target: # support s3, git (first), cos, googledrive
      git:
        secretRef: gitsecret  # should contain fields username and password
        repository: github.com/kalantar/llm-d-data
        branch: main
      dir: kalantar/inference-scheduling
    source:
      pvc:
        # flag indicating whether or not the PVC should be created as part of the experiment execution.
        create: false
        name: workload-pvc
        # size of the volume that should be created. Ignored if create: false
        size: 20 Gi
        # storageClass is the StorageClass of the PVC to create. Ignored if created: false
        # The selected StorageClass MUST support the RWX access mode.
        storageClass: default
      # location relative the mount location where a directory containing the results of all sweeps should be written.
      dir: kalantar/inference-scheduling
  hfsecret: llm-d-hf-token
  model: meta-llama/Llama-3.1-8B-Instruct

# -----------------------------------------------------------------------------
# components
# -----------------------------------------------------------------------------
# Lists the configurable parts of the system under test AND the workload generator.
# For each component you may define one or more named options. These options
# CAN be axis of the sweepSpace.
# Only components that need to be deployed or may be modified during an experiment
# SHOULD to be specified.
# For each option, either a configUrl or a config MUST be specified. A configUrl
# references a manifest that should be deployed to create the component.
# A config is an inlined manifest; ie yaml string.
components:

  # ---------------------------------------------------------------------------
  # vllm component
  # ---------------------------------------------------------------------------
  # Defines the model serving layer. Zero or more options can be specified.
  - component: vllm
    options:
      - name: vllm
        config: https://github.com/example-org/llmd-perf-kustomize//engine/vllm-single/overlays/base?ref=main
        vars:
          - name: gpu_memory_utilization
            targetPath: /to/be/done
            default: 90

          - name: block_size
            targetPath: /to/be/done
            default: 64

          - name: max_batched_tokens
            targetPath: /to/be/done
            default: 1024

          - name: prefill_token_threshold
            targetPath: /to/be/done
            default: 512

          - name: enable_prefill_caching
            targetPath: /to/be/done
            default: 1

          - name: tp
            targetPath: /to/be/done
            default: 1

          - name: dp
            targetPath: /to/be/done
            default: 1

  # ---------------------------------------------------------------------------
  # workload-profile component
  # ---------------------------------------------------------------------------
  # Creates a ConfigMap with configuration of the workload profiles.
  # This ConfigMap is required to configure the workload component.
  # Create using: kubectl create cm ${workload_type}-profile--dry-run=client --from-file=workload/profiles/${workload_type} -o yaml > api/${workload_type}-profiles.yaml
  - component: workload-profile
    options:
      - name: shared_prefix_synthetic
        config: https://raw.githubusercontent.com/llm-d/llm-d-benchmark/refs/heads/main/workload/profiles/inference-perf/shared_prefix_synthetic.yaml.in
        vars:
          - name: request_rate
            targetPath: /request_rate
          - name: input_len
            targetPath: /input_len
          - name: output_len
            targetPath: /output_len
          - name: prefix_hit_ratio
            targetPath: /prefix_hit_ratio

  # ---------------------------------------------------------------------------
  # harness component
  # ---------------------------------------------------------------------------
  # Exactly one harness must be defined here. The `harness` value identifies the
  # load generator and should be one of: fmperf | inference-perf | guildllm | dllm-bench
  # (Confirm the spelling of 'guildllm' vs. your preferred tool name.)
  #
  # `config` points to a reference containing the workload job/runner definition.
  #
  # Variables here are typical load-intensity settings; the sweep can override them
  # via matching axis names in `sweepSpace.axes`.
  - component: harness
    options:
      - name: custom-workload-generator
        config: https://github.com/our-custom-generator/manifest.yaml
        vars:
          - name: resultsPvc
            path: .spec.template.spec.volumes[?(@.name=="results")].persistentVolumeClaim.claimName
            default: ${ .configuration.source.pvc.name }

# -----------------------------------------------------------------------------
# sweepSpace
# -----------------------------------------------------------------------------
# Describes combinations and WHICH of them to try.
#
# - `axes`: declares the dimensions and value sets to combine.
#   Each axis name MUST match a variable name in one of the above `vars`
#   lists OR a profile/option selector under `components` (like `gaie`
#   or `vllm`). When an axis matches a variable name, it overrides that variableâ€™s
#   default for the corresponding runs.
#
# - By default (if `include` is empty or not present), a runner MAY treat `axes`
#   as a request for a full Cartesian product across all value lists.
#
# - `constraint`: identifies relationships that must or must not hold between variables being
#   swept. Invalid combinations are ignored.
sweepSpace:
  axes:
    - variables:
        - vllm/vllm/gpu_memory_utilization
      levels: 
        - values: [50]
        - values: [60]
        - values: [70]
        - values: [80]
        - values: [90]

    - variables:
        - vllm/vllm/block_size
      levels:
        - values: [8]
        - values: [16]
        - values: [32]
        - values: [64]

    - variables:
        - vllm/vllm/max_batched_tokens
      levels:
        - values: [256]
        - values: [512]
        - values: [1024]
        - values: [2056]

    - variables:
        - vllm/vllm/tp
      levels:
        - values: [1]
        - values: [2]
        - values: [4]
        - values: [8]

    - variables:
        - vllm/vllm/dp
      levels:
        - values: [1]
        - values: [2]
        - values: [4]
        - values: [8]

  # constraint:
