metadata:
  # A short, unique suite identifier (used for naming runs and outputs).
  name: pd-disaggregation-well-lit-path-benchmark
  # One or two sentences describing what this suite explores.
  description: >
    Define performance experiments for llm-d by sweeping Gateway API Inference Extension
    configurations, vLLM engine knobs, and workload intensity.

# -----------------------------------------------------------------------------
# configuration
# -----------------------------------------------------------------------------
# Minimal, global settings independent of any particular experiment case.
# - namespace: where resources for this suite are created.
# - output.baseDir: a base path where a runner MAY store logs/results/metadata.
#   (This file does not dictate how outputs are written; runners can choose.)
configuration:
  namespace: llmd-bench
  output:
    baseDir: ~/data/inference-scheduling/${metadata.name}/${timestamp}
    sourceDir: "[component=data]/options[name=results]"

# -----------------------------------------------------------------------------
# components
# -----------------------------------------------------------------------------
# Lists the configurable parts of the system under test AND the workload generator.
# For each component you may define one or more named options. 
# The experiment sweep can select among the profiles and over the variables of 
# each choice.
components:

  - component: model-cache
    options:
      - name: model-cache
        config: https://a-pvc-and-job-manifest.yaml
        # can inline config
        # do we need a configType field: inline, manifest, helm, kustomize ?

  - component: data
    options:
      - name: results
        config: https://a-pvc.yaml

  # ---------------------------------------------------------------------------
  # gateway component
  # ---------------------------------------------------------------------------
  # Zero or one gateway profile may be selected by the sweep.
  # If this section is omitted entirely, the runner should assume a gateway
  # is already deployed and should not be modified by this suite.
  #
  # `config` points to a reference containing the gateway definition (for example,
  # a remote file path or repository location that resolves to a valid definition).
  - component:
    options:
      - name: istio
        config: https://github.com/example-org/istio-gateway.yaml

  # ---------------------------------------------------------------------------
  # gaie component
  # ---------------------------------------------------------------------------
  # One of these profiles may be selected by the sweep to configure the
  # Kubernetes Gateway API Inference Extension (gaie) behavior (e.g., default vs.
  # scheduler-backed with different picker strategies).
  #
  # `config` may be either:
  # - an embedded manifest
  # - or a reference that resolves to a concrete configuration
  #
  # If this section is omitted or no profile is selected, the runner should assume
  # the extension configuration is already present and unchanged.
  - component: gaie
    options:
      - name: gaie
        config: https://github.com/example-org/gaie.yaml
        vars:
          - name: profile
            targetPath: Deployment[metadata.name=epp]:/spec/template/spec/containers[0]/args[]
            default: default.yaml

  # ---------------------------------------------------------------------------
  # vllm component
  # ---------------------------------------------------------------------------
  # Defines the model serving layer. The `options` list lets the sweep pick one
  # deployment style (e.g., single process vs. standalone variant). Variables
  # below provide tunables that apply to the chosen option. Options that do not
  # recognize a variable should simply ignore it.
  - component: vllm
    options:
      - name: vllm-pd
        config: https://github.com/example-org/llmd-perf-kustomize//engine/vllm-single/overlays/base?ref=main
        vars:
          - name: prefill_replicas
            targetPath: prefill/spec/replicas
          - name: prefill_tp
            targetPath: prefill/spec/components[0]/args[]
          - name: decode_replicas
            targetPath: decode/spec/replicas
            default: 1
          - name: decode_tp
            targetPath: decode/spec/components[0]/args[]

      - name: vllm-standalone
        config: https://github.com/example-org/llmd-perf-kustomize//engine/vllm-single/overlays/base?ref=main
        vars:
          - name: replicas
            targetPath: /spec/replicas
          - name: tp
            targetPath: /spec/components[0]/args[]

  # ---------------------------------------------------------------------------
  # workload component
  # ---------------------------------------------------------------------------
  # Exactly one workload must be defined here. The `harness` value identifies the
  # load generator and should be one of: fmperf | inference-perf | guildllm | dllm-bench
  # (Confirm the spelling of 'guildllm' vs. your preferred tool name.)
  #
  # `config` points to a reference containing the workload job/runner definition.
  #
  # Variables here are typical load-intensity settings; the sweep can override them
  # via matching axis names in `sweepSpace.axes`.
  - component: workload
    options:
      - name: vllm-benchmark
        config: https://github.com/vllm-benchmark/manifest.yaml
        vars:
          - name: results
            targetPath: /spec/template/spec/volumes[name=results]/persistentVolumeClaim/claimName
            default: results

  #
  # workload-profile component
  #
  # Creates a ConfigMap with configuration of 
  - component: workload-profile
    options:
      - name: random_concurrent
        config: https://raw.githubusercontent.com/llm-d/llm-d-benchmark/refs/heads/main/workload/profiles/vllm-benchmark/random_concurrent.yaml.in
        vars:
          - name: max-concurrency
            targetPath: /max-concurrency
          - name: num_prompts
            targetPath: /num_prompts

# -----------------------------------------------------------------------------
# sweepSpace
# -----------------------------------------------------------------------------
# Describes combinations and WHICH of them to try.
#
# - `axes`: declares the dimensions and value sets to combine.
#   Each axis name MUST match a variable name in one of the above `vars`
#   lists OR a profile/option selector under `components` (like `gaie`
#   or `vllm`). When an axis matches a variable name, it overrides that variableâ€™s
#   default for the corresponding runs.
#
# - By default (if `include` is empty or not present), a runner MAY treat `axes`
#   as a request for a full Cartesian product across all value lists.
#
# - `constraint`: identifies relationships that must or must not hold between variables being
#   swept. Invalid combinations are ignored.
sweepSpace:
  axes:
    - variables: [ vllm ]
      levels:
        - values: [vllm-standalone]
        - values: [vllm-pd]

    - variables:
        - vllm/vllm-standalone/replicas
        - vllm/vllm-standalone/tp
      levels:
        - values: [1,2]
        - values: [1,4]
        - values: [1,8]

    - variables:
        - vllm/vllm-pd/prefill_replicas
        - vllm/vllm-pd/prefill_tp
        - vllm/vllm-pd/decode_replicas
        - vllm/vllm-pd/decode_tp
      levels:
        - values: [8,1,1,8]
        - values: [4,2,1,8]
        - values: [2,4,1,8]
        - values: [6,2,1,4]
        - values: [4,2,2,4]
        - values: [2,2,3,4]

    - variables:
        - workload-profile/random_concurrent/max-concurrency
        - workload-profile/random_concurrent/num-prompts
      levels:
        - values: [1, 10]
        - values: [8, 80]
        - values: [32, 320]
        - values: [64, 640]
        - values: [12, 1280]
        - values: [256, 2560]


  constraint: "express that vllm-standalone is not compatible with prefill_replicas, etc."
