---
# Source: inferencepool/templates/rbac.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mygaie-epp
  namespace: llmdbench
  labels:
    app.kubernetes.io/name: mygaie-epp
    app.kubernetes.io/version: "v1.0.1-rc.1"
---
# Source: inferencepool/templates/epp-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mygaie-epp
  namespace: llmdbench
data:
  default-plugins.yaml: |
    apiVersion: inference.networking.x-k8s.io/v1alpha1
    kind: EndpointPickerConfig
    plugins:
    - type: queue-scorer
    - type: kv-cache-utilization-scorer
    - type: prefix-cache-scorer
    schedulingProfiles:
    - name: default
      plugins:
      - pluginRef: queue-scorer
      - pluginRef: kv-cache-utilization-scorer
      - pluginRef: prefix-cache-scorer
  default.yaml: |-
    apiVersion: inference.networking.x-k8s.io/v1alpha1
    kind: EndpointPickerConfig
    plugins:
    - type: low-queue-filter
      parameters:
        threshold: 128
    - type: lora-affinity-filter
      parameters:
        threshold: 0.999
    - type: least-queue-filter
    - type: least-kv-cache-filter
    - type: decision-tree-filter
      name: low-latency-filter
      parameters:
        current:
          pluginRef: low-queue-filter
        nextOnSuccess:
          decisionTree:
            current:
              pluginRef: lora-affinity-filter
            nextOnSuccessOrFailure:
              decisionTree:
                current:
                  pluginRef: least-queue-filter
                nextOnSuccessOrFailure:
                  decisionTree:
                    current:
                      pluginRef: least-kv-cache-filter
        nextOnFailure:
          decisionTree:
            current:
              pluginRef: least-queue-filter
            nextOnSuccessOrFailure:
              decisionTree:
                current:
                  pluginRef: lora-affinity-filter
                nextOnSuccessOrFailure:
                  decisionTree:
                    current:
                      pluginRef: least-kv-cache-filter
    - type: random-picker
      parameters:
        maxNumOfEndpoints: 1
    - type: single-profile-handler
    schedulingProfiles:
    - name: default
      plugins:
      - pluginRef: low-latency-filter
      - pluginRef: random-picker
  pd-config.yaml: |-
    apiVersion: inference.networking.x-k8s.io/v1alpha1
    kind: EndpointPickerConfig
    plugins:
    - type: prefill-header-handler
    - type: prefill-filter
    - type: decode-filter
    - type: max-score-picker
    - type: queue-scorer
      parameters:
        hashBlockSize: 5
        maxPrefixBlocksToMatch: 256
        lruCapacityPerServer: 31250
    - type: pd-profile-handler
      parameters:
        threshold: 0
        hashBlockSize: 5
    schedulingProfiles:
    - name: prefill
      plugins:
      - pluginRef: prefill-filter
      - pluginRef: queue-scorer
        weight: 1.0
      - pluginRef: max-score-picker
    - name: decode
      plugins:
      - pluginRef: decode-filter
      - pluginRef: queue-scorer
        weight: 1.0
      - pluginRef: max-score-picker
  prefix-cache-estimate-config.yaml: |-
    apiVersion: inference.networking.x-k8s.io/v1alpha1
    kind: EndpointPickerConfig
    plugins:
    - type: queue-scorer
    - type: kv-cache-scorer
    - type: prefix-cache-scorer
      parameters:
        hashBlockSize: 64
        maxPrefixBlocksToMatch: 256
        lruCapacityPerServer: 31250
    - type: max-score-picker
      parameters:
        maxNumOfEndpoints: 1
    - type: single-profile-handler
    schedulingProfiles:
    - name: default
      plugins:
      - pluginRef: queue-scorer
        weight: 1
      - pluginRef: kv-cache-scorer
        weight: 1
      - pluginRef: prefix-cache-scorer
        weight: 3
      - pluginRef: max-score-picker
  prefix-cache-tracking-config.yaml: |-
    apiVersion: inference.networking.x-k8s.io/v1alpha1
    kind: EndpointPickerConfig
    plugins:
    - type: single-profile-handler
    - type: decode-filter
    - type: prefix-cache-scorer
      parameters:
        mode: cache_tracking
        indexerConfig:
          tokenProcessorConfig:
            blockSize: 64                         # must match vLLM block size if not default (16)
            hashSeed: "42"                        # must match PYTHONHASHSEED in vLLM pods
          kvBlockIndexConfig:
            enableMetrics: true                   # enable kv-block index metrics (prometheus)
            metricsLoggingInterval: 60000000000   # log kv-block metrics as well (1m in nanoseconds)
    - type: kv-cache-scorer # kv-cache-utilization
    - type: queue-scorer
    - type: max-score-picker
    schedulingProfiles:
    - name: default
      plugins:
        - pluginRef: decode-filter
        - pluginRef: prefix-cache-scorer
          weight: 2.0
        - pluginRef: kv-cache-scorer
          weight: 1.0
        - pluginRef: queue-scorer
          weight: 1.0
        - pluginRef: max-score-picker
---
# Source: inferencepool/templates/rbac.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "mygaie-llmdbench-epp"
  labels:
    app.kubernetes.io/name: mygaie-epp
    app.kubernetes.io/version: "v1.0.1-rc.1"
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
# Source: inferencepool/templates/rbac.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "mygaie-llmdbench-epp"
subjects:
- kind: ServiceAccount
  name: mygaie-epp
  namespace: llmdbench
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "mygaie-llmdbench-epp"
---
# Source: inferencepool/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: mygaie-epp
  namespace: llmdbench
  labels:
    app.kubernetes.io/name: mygaie-epp
    app.kubernetes.io/version: "v1.0.1-rc.1"
rules:
- apiGroups: ["inference.networking.x-k8s.io"]
  resources: ["inferenceobjectives"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["inference.networking.x-k8s.io"]
  resources: ["inferencepools"]
  verbs: ["get", "watch", "list"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
# Source: inferencepool/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mygaie-epp
  namespace: llmdbench
subjects:
- kind: ServiceAccount
  name: mygaie-epp
  namespace: llmdbench
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: mygaie-epp
---
# Source: inferencepool/templates/epp-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mygaie-epp
  namespace: llmdbench
  labels:
    app.kubernetes.io/name: mygaie-epp
    app.kubernetes.io/version: "v1.0.1-rc.1"
spec:
  selector:
    inferencepool: mygaie-epp
  ports:
    - name: grpc-ext-proc
      protocol: TCP
      port: 9002
    - name: http-metrics
      protocol: TCP
      port: 9090
    - name: zmq
      port: 5557
      protocol: TCP
      targetPort: 5557
  type: ClusterIP
---
# Source: inferencepool/templates/epp-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mygaie-epp
  namespace: llmdbench
  labels:
    app.kubernetes.io/name: mygaie-epp
    app.kubernetes.io/version: "v1.0.1-rc.1"
spec:
  replicas: 1
  strategy:
    # The current recommended EPP deployment pattern is to have a single active replica. This ensures 
    # optimal performance of the stateful operations such prefix cache aware scorer.
    # The Recreate strategy the old replica is killed immediately, and allow the new replica(s) to 
    # quickly take over. This is particularly important in the high availability set up with leader
    # election, as the rolling update strategy would prevent the old leader being killed because 
    # otherwise the maxUnavailable would be 100%.
    type: Recreate
  selector:
    matchLabels:
      inferencepool: mygaie-epp
  template:
    metadata:
      labels:
        inferencepool: mygaie-epp
    spec:
      serviceAccountName: mygaie-epp
      # Conservatively, this timeout should mirror the longest grace period of the pods within the pool
      terminationGracePeriodSeconds: 130
      containers:
      - name: epp
        image: ghcr.io/llm-d/llm-d-inference-scheduler:v0.2.1
        imagePullPolicy: Always
        args:
        - --pool-name
        - mygaie
        - --pool-namespace
        - llmdbench
        - --pool-group
        - "inference.networking.x-k8s.io"
        - --zap-encoder
        - "json"
        - --config-file
        - "/config/plugins-v2.yaml"
        # Pass additional flags via the inferenceExtension.flags field in values.yaml.
        - "--v"
        - "1"
        ports:
        - name: grpc
          containerPort: 9002
        - name: grpc-health
          containerPort: 9003
        - name: metrics
          containerPort: 9090
        - containerPort: 5557
          name: zmq
          protocol: TCP
        livenessProbe:
          grpc:
            port: 9003
            service: inference-extension
          initialDelaySeconds: 5
          periodSeconds: 10
        readinessProbe:
          grpc:
            port: 9003
            service: inference-extension
          periodSeconds: 2

        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: HF_TOKEN
          valueFrom:
            secretKeyRef:
              key: HF_TOKEN
              name: llm-d-hf-token
        volumeMounts:
        - name: plugins-config-volume
          mountPath: "/config"
      volumes:
      - name: plugins-config-volume
        configMap:
          name: mygaie-epp
---
# Source: inferencepool/templates/inferencepool.yaml
apiVersion: inference.networking.x-k8s.io/v1alpha2
kind: InferencePool
metadata:
  name: mygaie
  namespace: llmdbench
  labels:
    app.kubernetes.io/name: mygaie-epp
    app.kubernetes.io/version: "v1.0.1-rc.1"
spec:
  targetPortNumber: 8000
  selector:
    llm-d.ai/inferenceServing: "true"
    llm-d.ai/model: "meta-lla-cee165fc-instruct"
  extensionRef:
    name: mygaie-epp
    portNumber: 9002
    failureMode: FailClose
